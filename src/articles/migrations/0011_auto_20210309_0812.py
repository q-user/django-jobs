# Generated by Django 3.1.7 on 2021-03-09 05:12

import os
import shutil
import urllib
from urllib.parse import urlsplit
from urllib.request import urlretrieve

from django.conf import settings
from django.db import migrations


def download_image(url, upload_to):
    filename = urlsplit(url).path.split('/')[-1]
    path = (os.path.join(settings.MEDIA_ROOT, upload_to))
    if not os.path.exists(path):
        os.makedirs(path)
    absolute_path = os.path.join(path, filename)
    r, h = urlretrieve(
        url,
        absolute_path
    )
    return os.path.join(upload_to, filename)


def move_pictures(apps, schema_editor):
    Article = apps.get_model('articles', 'Article')
    Picture = apps.get_model('articles', 'Picture')
    upload_to = [f.upload_to for f in Picture._meta.fields if f.name == 'image'][0]
    picture_map = {}
    for a in Article.objects.all().iterator():
        # Обработка изображений из интернета
        picture = None
        if a.icon_url and a.icon_url.startswith('http'):
            id = picture_map.get(a.icon_url, None)
            if id is None:
                try:
                    image = download_image(a.icon_url, upload_to)
                    picture = Picture.objects.create(
                        image=image,
                        url=a.icon_url
                    )
                    picture_map.update({a.icon_url: picture.id})
                except urllib.error.HTTPError:
                    a.icon_url = ''
                    a.save()
                    continue
            else:
                picture = Picture.objects.get(id=id)

        # Обработка локальных изображений
        else:
            url = str(a.source.icon)
            id = picture_map.get(url, None)
            if id is None:
                # Если файла нет, нужно его переместить и создать
                # новый инстанс Picture

                path = os.path.join(settings.MEDIA_ROOT, url)
                new_path = path.replace('datasource_icons', 'article_icons')
                # path = Path(path).rename(new_path)
                shutil.copy(path, new_path)
                relative_path = new_path.replace(settings.MEDIA_ROOT + '/', '')

                picture = Picture.objects.create(
                    image=relative_path,
                    url=url
                )
                picture_map.update({
                    url: picture.id
                })
            else:
                picture = Picture.objects.get(id=id)

        a.picture = picture
        a.save()


class Migration(migrations.Migration):
    dependencies = [
        ('articles', '0010_auto_20210309_0811'),
    ]

    operations = [
        migrations.RunPython(move_pictures, migrations.RunPython.noop)
    ]
